																GIT COMMANDS
									
------------------------------------------------------SETUP GIT ON PC--------------------------------------------------------------------------------------------

1. git --version
2. git config --global user.name "hamzakhan"		//global sets the username and email for every repo on computer
3. git config --global user.email "khamza968@gmail.com"
4. mkdir GITProject  //create dir for git project
5. cd GITProject	//change path to git project
6. git init			//Initialise git repo on that folder



------------------------------------------------------ADD NEW FILES TO GIT REPO----------------------------------------------------------------------------------

1. ls 		//List the files present in current dir
2. git status	//get the status of all files in current dir
3.Files in your Git repository folder can be in one of 2 states:

		-->Tracked - files that Git knows about and are added to the repository
		-->Untracked - files that are in your working directory, but not added to the repository
 When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.

 Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.
 
4. git add index.html		//The file should be Staged   -->Only for 1 file
5. git status				//Now the file has been added to the Staging Environment
6. To stage more than 1 file--> we can use--> git add --all OR git add -A
	Using --all instead of individual filenames will stage all changes (new, modified, and deleted) files.
	Now all 3 files are added to the Staging Environment, and we are ready to do our first commit.
	
7. git commit -m "Commit all the files"			//The commit command performs a commit, and the -m "message" adds a message.
8. Commit directly without staging-->when the change is very small--> first check the status of file by using --short:-
	git status --short				//	Short status flags are:
																?? - Untracked files
																A - Files added to stage
																M - Modified files
																D - Deleted files
  The file we expected is modified. So let's commit it directly:-
	git commit -a -m "Updated index.html with a new line"

9. git log				//generate logs for all the changes and commits
10. git 'command' -help   //See all the available options for the specific command  ex- git commit -help OR git commit --help
11. git help --all   	 //See all possible commands
	Note: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view.
	
12. git rm -r filename.txt		//to remove file from dir


------------------------------------------------------GIT BRANCH------------------------------------------------------------------------------------------------

-->Branches allow you to work on different parts of a project without impacting the main branch.
-->When the work is complete, a branch can be merged with the main project.

1. git branch new-world-branch		//create new branch
2. git checkout new-world-branch	//Move to specified branch from current branch
		Note:Using the -b option on checkout will create a new branch, and move to it, if it does not exist--> Ex- git checkout -b emergency-fix
	Add the image file and modified index.html
3. git status
4. git add -all	 		//staged the files 
5. git commit -m "image file has been commited"
	
--> Check the files in new-world-branch by--> ls -->4 files are there and the index.htm is modified
6. git checkout master		//changed to master
	-->now check the files in master--> ls  --> 3 files are there and index.htm is reverted back to same code before alteration

-->Emergency Fix Branch:-
7. git checkout -b emergency-fix 	//Created and moved to emergency fix
	Made changes to index.html and then check status
8. git status
9. git add index.html
10. git commit -m "Updated index.html"

-->Merging the emergency-fix and master branch:-
11. git checkout master 		//checkout to master first
12. git merge emergency-fix		//merge with master
13. git branch -d emergency-fix		//delete branch as it is of no use now

--> Merge Conflict
14. git checkout new-world-branch			//Add another image file (img_hello_git.jpg) and change index.html
15. git add --all
16. git commit -m "added new image"

We see that index.html has been changed in both branches. Now we are ready to merge new-world-branch into master. 
17. git checkout master
18 git merge new-world-branch
	The merge failed, as there is conflict between the versions for index.html. Let us check the status:
19. git status		//This confirms there is a conflict in index.html, but the image files are ready and staged to be committed.
	
	To solve the conflict, change the index.html as needed and then stage it.
20. git add index.html
21. git status
22. git commit -m "merged with new-world-branch after fixing conflicts"	
23. git branch -d new-world-branch	//delete the branch
24. git branch -M 'newbranchname'	//rename the branch 
25. git repack && git gc			//Remove large files from commit history
26. git reset --hard HEAD~1			//Remove last commit from git
27. git rm -r filename				//Remove file from git

------------------------------------------------------GITHUB------------------------------------------------------------------------------------------------

1. Create account on github and create reporsitory using defaults.(use same email as used in git config)
2. git remote add origin 'url'		//to add remote repository, with the specified URL, as an origin to your local Git repo(http url)
3. git push --set-upstream origin master	//to push our master branch to the origin url, and set it as the default remote branch
	IF Error Occurs:-
		>$ cd
		>$ mkdir .ssh;cd .ssh
		>$ ssh-keygen -o -t rsa -b 4096 -C "email@example.com"
		-->add the public key as 'id_rsa' in github under ssh certificates.
		-->Open bash in repo in explorer(master dir)
		git push --set-upstream https://gitlab.com/Account_User_Name/Your_Project_Name.git master

	-->git remote -version		//to view all remote
	-->git remote remove origin //to remove remote
4. Pull command- pull is a combination of fetch and merge. It is used to pull all changes from a remote repository into the branch you are working on.
	git pull origin	OR git pull		//to pull all the changes into local repo
	git diff origin/master	//to check the files modified by github and not by git

5. Push command-	git push OR git push origin			//to push all the changes to github
6. git branch -a 		//to show all the remote and local branches
7. git branch -r		//to show all the remote branches
8. Pull branch from github to local repo:-
	git pull	--> 	git status		--> git branch -a	--> git checkout 'branchname' 	--> git pull	--> git branch	-->git checkout master
9. Push branch to github:-
	git checkout -b newpushbranch	--> made some changes to index.html	--> git status	--> git commit -a -m "error resolved in index.html"		
	--> git push origin newpushbranch
	In github--> Click on 'Compare and pull request' -->Click on 'create pull request'--> now you can merge it with the master and delete it or leave them as it is.
	
10. FORK a repository(cannot fork own repo)-A fork is a copy of a repository. This is useful when you want to contribute to someone else's project or start 	your own project based on theirs. Goto repo of user whose fork has to be made--> click on fork on upper right corner and the fork repo will be created in you github account.

11. CLONE-A clone is a full copy of a repository, including all logging and versions of files on our local git.Now clone your repo(not the fork one),which one you need by--> git clone https://github.com/hamzaAliKhanDev/GitCodeRepository.git 
Note: IF need to add to a particular foldler-->git clone https://github.com/hamzaAliKhanDev/GitCodeRepository.git myfolder 
-->cd GitCodeRepository		//if folder name is not specified
-->git status
-->git log
Now we have full copy of our original repo ie.GitCodeRepository. Now setup the remotes of this clone repo:-
-->git remote -v
-->git remote rename origin upstream			//rename the original origin remote to upstream
Then fetch the URL of our own fork And add that as origin:-
-->git remote add origin https://github.com/hamzaAliKhanDev/w3schools-test.github.io.git
-->git remote -v
Note: According to Git naming conventions, it is recommended to name your own repository origin, and the one you forked for upstream
Now we have 2 remotes:
Origin - our own fork, where we have read and write access
Upstream - the original, where we have read-only access
Now make changes to code-->We have made a lot of changes to our local Git.Now we push them to our GitHub fork:-

12. git push origin			//Go to GitHub, and we see that the fork repository has a new commit. And we can send a Pull Request to the original repository.
-->Goto fork and click on pull request -->create a pull request-->Remember to add an explanation for the administrators-->click on create pull request.
-->Approving pull request-->Now any member with access can see the Pull Request when they see the original repository And they can see the proposed changes-->Comment on the changes and merge-->confirm-->And changes have been merged with master

13. .gitignore-Git will not track files and folders specified in .gitignore file. However, the .gitignore file itself IS tracked by Git.
	-->touch .gitignore				//in root of local git
	in .gitignore file--># ignore ALL .log files
						 *.log

						# ignore ALL files in ANY directory named temp
						temp/
	Note: In this case, we use a single .gitignore which applies to the entire repository.It is also possible to have additional .gitignore files in subdirectories. These only apply to files or folders within that directory.
	For rules of .gitignore refer-->https://www.w3schools.com/git/git_ignore.asp?remote=github
	It is also possible to ignore files or folders but not show it in the distributed .gitignore file.These kinds of ignores are specified in the .git/info/exclude file. It works the same way as .gitignore but are not shown to anyone else.
	
14. Generating SSH keyPair:-
	-->ssh-keygen -t rsa -b 4096 -C "khamza968@gmail.com"		//you will be required to enter the details
	-->ssh-add /Users/user/.ssh/id_rsa							//'/Users/user/.ssh/id_rsa'- it is the path at given at above step where public is saved
	-->clip < /Users/user/.ssh/id_rsa.pub						//Copy the public key to paste in github
	-->Goto settings-->SSH and GPG Keys-->Select a title, and paste the public SSH key into the "Key" field, and click "Add SSH Key
	-->ssh -T khamza968@gmail.com									//test ssh connection 
	-->git remote add ssh-origin git@github.com:w3schools-test/hello-world.git			//incase of new repo
	-->git remote set-url origin git@github.com:w3schools-test/hello-world.git			//to rename the https to ssh remote
	
15. REVERT-revert is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.
-->git log --oneline			//gives just one line per commit showing
-->git revert HEAD --no-edit	//git revert HEAD (revert the latest change,  and then commit), adding the option --no-edit to skip the commit message editor (getting the default revert message)
--> git revert <commit-hash>			//first 7 char of commit
NOTE:To revert to earlier commits, use git revert HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)

16.RESET-reset is the command we use when we want to move the repository back to a previous commit, discarding any changes made after that commit.
-->git log --oneline
-->git reset <commit-hash>
-->git reset --hard HEAD~1			//Remove last commit permanently from git

17. AMEND-is used to modify the most recent commit.
-->git commit --amend -m "Modified Comment"