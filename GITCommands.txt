																GIT COMMANDS
									
------------------------------------------------------SETUP GIT ON PC--------------------------------------------------------------------------------------------

1. git --version
2. git config --global user.name "hamzakhan"		//global sets the username and email for every repo on computer
3. git config --global user.email "khamza968@gmail.com"
4. mkdir GITProject  //create dir for git project
5. cd GITProject	//change path to git project
6. git init			//Initialise git repo on that folder



------------------------------------------------------ADD NEW FILES TO GIT REPO----------------------------------------------------------------------------------

1. ls 		//List the files present in current dir
2. git status	//get the status of all files in current dir
3.Files in your Git repository folder can be in one of 2 states:

		-->Tracked - files that Git knows about and are added to the repository
		-->Untracked - files that are in your working directory, but not added to the repository
 When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.

 Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.
 
4. git add index.html		//The file should be Staged   -->Only for 1 file
5. git status				//Now the file has been added to the Staging Environment
6. To stage more than 1 file--> we can use--> git add --all OR git add -A
	Using --all instead of individual filenames will stage all changes (new, modified, and deleted) files.
	Now all 3 files are added to the Staging Environment, and we are ready to do our first commit.
	
7. git commit -m "Commit all the files"			//The commit command performs a commit, and the -m "message" adds a message.
8. Commit directly without staging-->when the change is very small--> first check the status of file by using --short:-
	git status --short				//	Short status flags are:
																?? - Untracked files
																A - Files added to stage
																M - Modified files
																D - Deleted files
  The file we expected is modified. So let's commit it directly:-
	git commit -a -m "Updated index.html with a new line"

9. git log				//generate logs for all the changes and commits
10. git 'command' -help   //See all the available options for the specific command  ex- git commit -help OR git commit --help
11. git help --all   	 //See all possible commands
	Note: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view.
	

------------------------------------------------------GIT BRANCH------------------------------------------------------------------------------------------------

-->Branches allow you to work on different parts of a project without impacting the main branch.
-->When the work is complete, a branch can be merged with the main project.

1. git branch new-world-branch		//create new branch
2. git checkout new-world-branch	//Move to specified branch from current branch
		Note:Using the -b option on checkout will create a new branch, and move to it, if it does not exist--> Ex- git checkout -b emergency-fix
	Add the image file and modified index.html
3. git status
4. git add -all	 		//staged the files 
5. git commit -m "image file has been commited"
	
--> Check the files in new-world-branch by--> ls -->4 files are there and the index.htm is modified
6. git checkout master		//changed to master
	-->now check the files in master--> ls  --> 3 files are there and index.htm is reverted back to same code before alteration

-->Emergency Fix Branch:-
7. git checkout -b emergency-fix 	//Created and moved to emergency fix
	Made changes to index.html and then check status
8. git status
9. git add index.html
10. git commit -m "Updated index.html"

-->Merging the emergency-fix and master branch:-
11. git checkout master 		//checkout to master first
12. git merge emergency-fix		//merge with master
13. git branch -d emergency-fix		//delete branch as it is of no use now

--> Merge Conflict
14. git checkout new-world-branch			//Add another image file (img_hello_git.jpg) and change index.html
15. git add --all
16. git commit -m "added new image"

We see that index.html has been changed in both branches. Now we are ready to merge new-world-branch into master. 
17. git checkout master
18 git merge new-world-branch
	The merge failed, as there is conflict between the versions for index.html. Let us check the status:
19. git status		//This confirms there is a conflict in index.html, but the image files are ready and staged to be committed.
	
	To solve the conflict, change the index.html as needed and then stage it.
20. git add index.html
21. git status
22. git commit -m "merged with new-world-branch after fixing conflicts"	
23. git branch -d new-world-branch	//delete the branch
